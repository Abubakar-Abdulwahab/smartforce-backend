tags:
  - name: auth
    description: Authentication API

paths:
  /signup:
    post:
      tags:
        - auth
      summary: User Signup
      parameters:
        - name: body
          in: body
          description: User data for signup
          required: true
          schema:
            $ref: '#/definitions/CreateUserDto'
      responses:
        201:
          description: 'User created successfully'
        400:
          description: 'Bad request'
        409:
          description: 'Conflict'
        500:
          description: 'Server error'

  /login:
    post:
      tags:
        - auth
      summary: User Login
      parameters:
        - name: body
          in: body
          description: User data for login
          required: true
          schema:
            $ref: '#/definitions/CreateUserDto'
      responses:
        200:
          description: 'Login successful'
        400:
          description: 'Bad request'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server error'

  /logout:
    post:
      tags:
        - auth
      summary: User Logout
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'Logout successful'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server error'

definitions:
  CreateUserDto:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        description: User email
      password:
        type: string
        format: password
        description: User password
        minLength: 9
        maxLength: 32

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"'

security:
  - bearerAuth: []

schemes:
  - https
  - http
